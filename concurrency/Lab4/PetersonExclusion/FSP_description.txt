const False = 0
const True  = 1
range Bool  = False..True
range Card  = 1..2

set   BoolActions = {setTrue, setFalse, [False], [True]}
set   CardActions = {set1, set2, [1], [2]}

BOOLVAR = VAL[False],
VAL[v:Bool] = (setTrue  -> VAL[True]
              |setFalse -> VAL[False]
              |[v]      -> VAL[v]
              ).

CARDVAR = VALCARD[1],
VALCARD[i:Card] = (set1 -> VALCARD[1]
		  |set2 -> VALCARD[2]
		  |[i] -> VALCARD[i]
		  ).
              
              

NEIGHBOUR1 = (flag1.setTrue -> card.set2 -> TEST1),
TEST1       = (flag2[raised:Bool] -> card[turn:Card] ->
                if(raised && turn==2) then
                   (wait -> TEST1)
                else
                   (enter -> exit -> flag1.setFalse -> NEIGHBOUR1)
              )+{{flag1,flag2}.BoolActions, {card}.CardActions}.

NEIGHBOUR2 = (flag2.setTrue -> card.set1 -> TEST2),
TEST2       = (flag1[raised:Bool] -> card[turn:Card] ->
                if(raised && turn==1) then
                   (wait -> TEST2)
                else
                   (enter -> exit -> flag2.setFalse -> NEIGHBOUR2)
              )+{{flag1,flag2}.BoolActions, {card}.CardActions}.

              
||FLAGS = (flag1:BOOLVAR || flag2:BOOLVAR || card:CARDVAR).

||FIELD = (alice:NEIGHBOUR1 || bob:NEIGHBOUR2 || {alice,bob}::FLAGS || SAFETY).

||GREEDY = FIELD << {alice.enter, bob.enter}.

property SAFETY = (alice.enter -> alice.exit -> SAFETY
		   | bob.enter -> bob.exit -> SAFETY).
		   
progress ALICE_ENTERS = {alice.enter}
progress BOB_ENTERS = {bob.enter}

